{"version":3,"sources":["components/Log.js","components/SkeletonLog.js","components/GenerateLogs.js","page/App.js","index.js"],"names":["Log","props","flightNumber","type","mission","details","rocket","crew","launchDate","launchPad","payloadType","customers","orbit","payloadMass","landSuccess","img","launchSuccess","webcast","className","src","alt","dateGB","time12HourGB","href","target","rel","SkeletonLog","timeConverter","apiData","newDate","Date","setTime","toLocaleDateString","weekday","year","month","day","toLocaleString","hour","minute","hour12","getData","query","setState","a","fetch","method","headers","body","JSON","stringify","then","res","json","result","docs","catch","error","console","log","setMasonry","Masonry","itemSelector","horizontalOrder","gutter","fitWidth","GenerateLogs","useState","upcoming","setUpcoming","past","setPast","useEffect","options","populate","sort","flight_number","limit","fetchLaunches","name","length","date_unix","launchpad","full_name","payloads","mass_kg","links","patch","small","id","map","i","cores","landing_success","success","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1692b3cc.chunk.js","sourcesContent":["import React from 'react'\n\nconst Log = (props) => {\n    const { flightNumber, type, mission,  details, rocket, crew, launchDate, launchPad, payloadType, customers, orbit, payloadMass, landSuccess, launchSuccess, img, webcast } = props;\n  \n    return (\n      <div className=\"log masonry-item\">\n        <h3>\n          {type} - {mission}\n        </h3>\n        <img src={img} alt=\"Mission Badge\" />\n  \n        {type === \"Upcoming\" ? \n          <>\n            <h4>\n                <strong>{mission}</strong> will use the <strong>{rocket}</strong> and\n                launch on <strong>{launchDate.dateGB}</strong> at{\" \"}\n                <strong>{launchDate.time12HourGB}</strong>\n            </h4>\n            <p className=\"details\">{details}</p>\n          </>\n         : \n          <p className=\"details\">{details}</p>\n        }\n  \n        <ul>\n          <li>\n            <strong>Flight Number:</strong> {flightNumber}\n          </li>\n          <li>\n            <strong>Rocket:</strong> {rocket}\n          </li>\n          <li>\n            <strong>Crew:</strong> {crew}\n          </li>\n          <li>\n            <strong>Launch Date:</strong> {launchDate.dateGB} -{\" \"}\n            {launchDate.time12HourGB}\n          </li>\n          <li>\n            <strong>launch Pad:</strong> {launchPad}\n          </li>\n          <li>\n            <strong>Customer:</strong> {customers}\n          </li>\n          <li>\n            <strong>Orbit:</strong> {orbit}\n          </li>\n          <li>\n            <strong>Payload Type:</strong> {payloadType}\n          </li>\n          <li>\n            <strong>Payload Mass:</strong> {payloadMass}\n          </li>\n          {type !== \"Upcoming\" && \n            <>\n              <li>\n                  <strong>Land Success:</strong> <span className={landSuccess ? \"yes\" : \"no\"}>{landSuccess ? \"Yes\" : \"No\" || \"N/A\"}</span>\n              </li>\n              <li>\n                <strong>Launch Success:</strong> <span className={landSuccess ? \"yes\" : \"no\"}>{landSuccess ? \"Yes\" : \"No\" || \"N/A\"}</span>\n              </li>\n            </>\n          }\n        </ul>\n            <a className={webcast ? \"webcast-button\" : \"webcast-button disabled\"}href={webcast || \"\"} target={webcast ? \"_blank\" : \"_self\"} rel=\"noreferrer\">\n                {webcast ? \"Watch Stream\" : \"Stream Not Available\"}\n            </a>\n      </div>\n    );\n};\n  \nexport default Log\n","import React from 'react'\n\nconst SkeletonLog = () => {  \n    return (\n      <div className=\"skeleton-log masonry-item\"></div>\n    );\n};\n  \nexport default SkeletonLog\n","import React, { useState, useEffect } from \"react\";\nimport Masonry from \"masonry-layout\";\n\nimport Log from \"./Log\";\nimport SkeletonLog from \"./SkeletonLog\";\n\nconst GenerateLogs = () => {\n    const [upcoming, setUpcoming] = useState(0);\n    const [past, setPast] = useState(0);\n\n    // console.log(\"upcoming\", upcoming);\n    // console.log(\"past\", past);\n    \n    useEffect(() => {\n        const fetchLaunches = async () => {\n            // Get the upcoming launch.\n            await getData(\n              {\n                query: {\n                  upcoming: true,\n                },\n                options: {\n                  populate: [\"rocket\", \"launchpad\", \"payloads\"],\n                  sort: {\n                    flight_number: \"asc\",\n                  },\n                  limit: 1,\n                },\n              },\n              setUpcoming\n            );\n            setMasonry();\n            // Get past launches.\n            await getData(\n                {\n                  query: {\n                    upcoming: false,\n                  },\n                  options: {\n                    populate: [\"rocket\", \"launchpad\", \"payloads\", \"cores\"],\n                    sort: {\n                      flight_number: \"desc\",\n                    },\n                    limit: 100,\n                  },\n                },\n                setPast\n              );\n            setMasonry();\n        }\n\n        fetchLaunches();\n        setMasonry();\n    }, []);\n\n  return (\n    <div className=\"logs\">\n      {upcoming\n        ? <Log\n          key={upcoming[0].id}\n          flightNumber={upcoming[0].flight_number}\n          details={upcoming[0].details}\n          type=\"Upcoming\"\n          mission={upcoming[0].name}\n          rocket={upcoming[0].rocket.name}\n          crew={upcoming[0].crew.length > 0 ? upcoming[0].crew.length : \"No crew\" }\n          launchDate={timeConverter(upcoming[0].date_unix)}\n          launchPad={upcoming[0].launchpad.full_name || \"TBA\"}\n          payloadType={upcoming[0].payloads[0].type || \"N/A\"}\n          customers={upcoming[0].payloads[0].customers.length ? upcoming[0].payloads[0].customers : \"N/A\"}\n          orbit={upcoming[0].payloads[0].orbit || \"N/A\"}\n          payloadMass={upcoming[0].payloads[0].mass_kg || \"N/A\"}\n          landSuccess=\"\"\n          launchSuccess=\"\"\n          img={upcoming[0].links.patch.small || \"/images/geostationary_orbit.png\"}\n          webcast={upcoming[0].links.webcast}\n        />\n        : <SkeletonLog />\n      }\n      {past \n        ? past.map((result, i) => {\n            let type = i === 0 ? \"Latest\" : \"Past\";\n            return (\n                <Log\n                    key={result.id}\n                    flightNumber={result.flight_number}\n                    type={type}\n                    mission={result.name}\n                    details={result.details}\n                    rocket={result.rocket.name}\n                    crew={result.crew.length > 0 ? result.crew.length : \"No crew\" }\n                    launchDate={timeConverter(result.date_unix)}\n                    launchPad={result.launchpad.full_name || \"TBA\"}\n                    payloadType={result.payloads[0].type || \"N/A\"}\n                    customers={result.payloads[0].customers.length ? result.payloads[0].customers : \"N/A\"}\n                    orbit={result.payloads[0].orbit || \"N/A\"}\n                    payloadMass={result.payloads[0].mass_kg ? `${result.payloads[0].mass_kg} kg` : \"N/A\"}\n                    landSuccess={result.cores[0].landing_success}\n                    launchSuccess={result.success}\n                    img={result.links.patch.small || \"/images/geostationary_orbit.png\"}\n                    webcast={result.links.webcast}\n                />\n            )\n        })\n        : <>\n            <SkeletonLog />\n            <SkeletonLog />\n            <SkeletonLog />\n            <SkeletonLog />\n            <SkeletonLog />\n          </>\n      }\n    </div>\n  );\n};\n\n// Helpers\nconst timeConverter = (apiData) => {\n    let options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\n    let newDate = new Date();\n    newDate.setTime(apiData * 1000);\n    let dateStringGB = newDate.toLocaleDateString('en-GB', options);\n    let time12Hour = newDate.toLocaleString('en-GB', { hour: 'numeric', minute: 'numeric', hour12: true });\n    // let timeGB = `${dateStringGB} - ${time12Hour}`;\n    return { \"dateGB\": dateStringGB, \"time12HourGB\": time12Hour };\n}\n\nconst getData = async (query, setState) => {\n    return fetch(\"https://api.spacexdata.com/v5/launches/query\",\n            {\n                method: \"POST\",\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(query)\n            })\n            .then(res => res.json())\n            .then(result => {\n                    // console.log(\"result\", result.docs);\n                    setState(result.docs);\n                }\n            )\n            .catch(error => {\n                console.log(\"Error\", error);\n            });\n}\n\nconst setMasonry = () => {\n    new Masonry(\".logs\", {\n        itemSelector: \".masonry-item\",\n        horizontalOrder: true,\n        gutter: 20,\n        fitWidth: true\n    });\n}\nexport default GenerateLogs;\n","import React from \"react\";\nimport \"./App.scss\";\n\nimport GenerateLogs from \"../components/GenerateLogs\";\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img className=\"logo\" src=\"/images/SpaceX-Logo.png\" alt=\"Logo\"/>\n      </header>\n      <main>\n        <div className=\"bg\">\n          <div className=\"stars\"></div>\n        </div>\n        <GenerateLogs />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './page/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}